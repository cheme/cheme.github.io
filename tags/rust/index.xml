<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Émeric misexperiment blog</title>
    <link>https://cheme.github.io/tags/rust/</link>
    <description>Recent content in Rust on Émeric misexperiment blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Nov 2017 10:14:08 +0200</lastBuildDate>
    
	<atom:link href="https://cheme.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Allowing both blocking and non-blocking transport</title>
      <link>https://cheme.github.io/posts/sync_transport/</link>
      <pubDate>Sun, 05 Nov 2017 10:14:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/sync_transport/</guid>
      <description>initial non blocking implementation In previous posts, MyDHT was redesign to include a main event loop (using mio) and manage non-blocking transport implementation from a central mainloop process.
Those non blocking transports behave similarily as non-blocking Tcp scocket by returning an error (&amp;ldquo;would block&amp;rdquo;) when not ready for operation. The mainloop polled registered event for those operations : connection incomming, read and write stream availability. Once polled operation are restored : for connection state is changed, for read and write streams service associated with those operation is unyield (the service was suspend on &amp;lsquo;would block&amp;rsquo; error).</description>
    </item>
    
    <item>
      <title>MyDHT service usage switch (part 2)</title>
      <link>https://cheme.github.io/posts/process2/</link>
      <pubDate>Sun, 29 Oct 2017 10:14:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/process2/</guid>
      <description>The point of this post is to give a taste of how service are configured within the MyDHT new design. we are going to adapt a test case to run in a single thread.
All changes describe are on &amp;lsquo;MyDHTConf&amp;rsquo; trait implementation for &amp;lsquo;TestLocalConf&amp;rsquo; struct (to create an application this big trait must be implemented : basically it contains the associated types and the initialisation functions of every components).</description>
    </item>
    
    <item>
      <title>MyDHT Refactoring And Threading (part 1)</title>
      <link>https://cheme.github.io/posts/process1/</link>
      <pubDate>Sun, 22 Oct 2017 10:56:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/process1/</guid>
      <description>Lastly I got some time in my hand (ended my previous job and looking for more low level programming) to refactor some pretty terrible old project of mine.
Even if the refactor is far from complete, the design and its primo implementation is.
This post focus on MyDHT redesign,
Previous design The initial purpose of MyDHT project was to design a library to run a distributed hash table. It evolves to key value peer to peer info exchange with multi-hop request proxying (query proxyied to none connected peers).</description>
    </item>
    
  </channel>
</rss>