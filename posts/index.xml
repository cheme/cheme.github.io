<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Émeric misexperiment blog</title>
    <link>https://cheme.github.io/posts/</link>
    <description>Recent content in Posts on Émeric misexperiment blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Mar 2018 01:02:08 +0200</lastBuildDate>
    
	<atom:link href="https://cheme.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Voting machine POC</title>
      <link>https://cheme.github.io/posts/voting_machine/</link>
      <pubDate>Sun, 11 Mar 2018 01:02:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/voting_machine/</guid>
      <description>This blog post describes a POC of a Voting Machine. It may look more like a Roadmap or a backlog for myDHT, yet it still is an example of a myDHT application.
The code is hosted on github.
The protocol Description A simple protocol, between each step should be added synchro period where we check distribution or synchro of each peers but it is not done at this point :</description>
    </item>
    
    <item>
      <title>Implementing MyDHT tunnel</title>
      <link>https://cheme.github.io/posts/tunnel_imp/</link>
      <pubDate>Sun, 12 Nov 2017 11:06:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/tunnel_imp/</guid>
      <description>Last post, we gave some thoughts on tunnel and mydht interaction,concluding that a mydht specific implementation specific for tunnel should be build (and in a second time maybe use it in a transport).
That was done for a single mode of &amp;lsquo;Full&amp;rsquo; tunnel : the mode that does not require caching. Cache usage mode and error reporting implementation are still incomplete but shall follow similar steps.
This post will describe some of the change upon tunnel and mydht, mainly needed to run within multithreaded environment with non blocking transport stream.</description>
    </item>
    
    <item>
      <title>Tunnel crate and MyDHT ?</title>
      <link>https://cheme.github.io/posts/tunnel/</link>
      <pubDate>Sun, 12 Nov 2017 10:56:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/tunnel/</guid>
      <description>In my previous post I described some aspects of MyDHT crate, basically a library to implement peer2peer application.
In this post I will describe another crates, tunnel; then try to define how it will be used within MyDHT.
Tunnel is a crate for experimenting with different kind of multi hop layered ciphering of content (similar to tor, maybe more like a multihop vpn).
It defines the various traits for operations associated with this problematics : route building, peer proxying, message sending, peer receiving, peer replying.</description>
    </item>
    
    <item>
      <title>Allowing both blocking and non-blocking transport</title>
      <link>https://cheme.github.io/posts/sync_transport/</link>
      <pubDate>Sun, 05 Nov 2017 10:14:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/sync_transport/</guid>
      <description>initial non blocking implementation In previous posts, MyDHT was redesign to include a main event loop (using mio) and manage non-blocking transport implementation from a central mainloop process.
Those non blocking transports behave similarily as non-blocking Tcp scocket by returning an error (&amp;ldquo;would block&amp;rdquo;) when not ready for operation. The mainloop polled registered event for those operations : connection incomming, read and write stream availability. Once polled operation are restored : for connection state is changed, for read and write streams service associated with those operation is unyield (the service was suspend on &amp;lsquo;would block&amp;rsquo; error).</description>
    </item>
    
    <item>
      <title>MyDHT service usage switch (part 2)</title>
      <link>https://cheme.github.io/posts/process2/</link>
      <pubDate>Sun, 29 Oct 2017 10:14:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/process2/</guid>
      <description>The point of this post is to give a taste of how service are configured within the MyDHT new design. we are going to adapt a test case to run in a single thread.
All changes describe are on &amp;lsquo;MyDHTConf&amp;rsquo; trait implementation for &amp;lsquo;TestLocalConf&amp;rsquo; struct (to create an application this big trait must be implemented : basically it contains the associated types and the initialisation functions of every components).</description>
    </item>
    
    <item>
      <title>MyDHT Refactoring And Threading (part 1)</title>
      <link>https://cheme.github.io/posts/process1/</link>
      <pubDate>Sun, 22 Oct 2017 10:56:08 +0200</pubDate>
      
      <guid>https://cheme.github.io/posts/process1/</guid>
      <description>Lastly I got some time in my hand (ended my previous job and looking for more low level programming) to refactor some pretty terrible old project of mine.
Even if the refactor is far from complete, the design and its primo implementation is.
This post focus on MyDHT redesign,
Previous design The initial purpose of MyDHT project was to design a library to run a distributed hash table. It evolves to key value peer to peer info exchange with multi-hop request proxying (query proxyied to none connected peers).</description>
    </item>
    
  </channel>
</rss>